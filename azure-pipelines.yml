# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- ci/cd-azure-pipeline-aks

resources:
- repo: self

variables:
  # Image repository
  governmentBackendRepo: 'government-backend'
  governmentBackendRepoEndpoint: 'k8scrvidchaindev.azurecr.io/government-backend'
  governmentFrontendRepo: 'government-frontend'
  governmentFrontendRepoEndpoint: 'k8scrvidchaindev.azurecr.io/government-frontend'
  universityBackendRepo: 'university-backend'
  universityBackendRepoEndpoint: 'k8scrvidchaindev.azurecr.io/university-backend'
  universityFrontendRepo: 'university-frontend'
  universityFrontendRepoEndpoint: 'k8scrvidchaindev.azurecr.io/university-frontend'
  landingRepo: 'demo-landing'
  landingRepoEndpoint: 'k8scrvidchaindev.azurecr.io/demo-landing'

  # Dockerfiles
  governmentBackendDocker: 'implementations/vidchain-government/vidchain-government-backend/Dockerfile'
  governmentFrontendDocker: 'implementations/vidchain-government/vidchain-government-frontend/Dockerfile'
  universityBackendDocker: 'implementations/vidchain-university/vidchain-university-backend/Dockerfile'
  universityFrontendDocker: 'implementations/vidchain-university/vidchain-university-frontend/Dockerfile'
  landingDocker: 'implementations/landing-page/Dockerfile'

  # Deployments YAML
  # Only used when deployments are already available in the cluster
  governmentBackendDeployment: 'deployment/government-backend-deployment'
  governmentFrontendDeployment: 'deployment/government-frontend-deployment'
  universityBackendDeployment: 'deployment/university-backend-deployment'
  universityFrontendDeployment: 'deployment/university-frontend-deployment'
  landingDeployment: 'deployment/university-frontend-deployment'

  # Otherwise Kubernetes YAML...
  # Used to create a new deployment (check commented code below)
  #governmentBackendKubernetes: 'implementations/vidchain-government/vidchain-government-backend/k8s.yml'
  #governmentFrontendKubernetes: 'implementations/vidchain-government/vidchain-government-frontend/k8s.yml'
  #universityBackendKubernetes: 'implementations/vidchain-university/vidchain-university-backend/k8s.yml'
  #universityFrontendKubernetes: 'implementations/vidchain-university/vidchain-university-frontend/k8s.yml'
  #landingKubernetes: 'implementations/landing-page/k8s.yml'

  # Kubernetes namespace
  namespace: 'development'

  # Image tagging: application version - build
  tagGovernmentBackend: 'v0.1-build.$(Build.BuildId)'
  tagGovernmentFrontend: 'v0.1-build.$(Build.BuildId)'
  tagUniversityBackend: 'v0.1-build.$(Build.BuildId)'
  tagUniversityFrontend: 'v0.1-build.$(Build.BuildId)'
  tagLanding: 'v0.1-build.$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  
stages:
- stage: Build
  displayName: 'Build stage'
  jobs:  
  - job: BuildGovernmentBackend
    displayName: 'Build Government Backend'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push Government Backend image to container registry
      inputs:
        command: buildAndPush
        repository: $(governmentBackendRepo)
        dockerfile: $(governmentBackendDocker)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tagGovernmentBackend)
  - job: BuildGovernmentFrontend
    displayName: 'Build Government Frontend'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an Government Frontend image to container registry
      inputs:
        command: buildAndPush
        repository: $(governmentFrontendRepo)
        dockerfile: $(governmentBackendDocker)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tagGovernmentFrontend)
  - job: BuildUniversityBackend
    displayName: 'Build University Backend'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push University Backend image to container registry
      inputs:
        command: buildAndPush
        repository: $(universityBackendRepo)
        dockerfile: $(governmentBackendDocker)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tagUniversityBackend)
  - job: BuildUniversityFrontend
    displayName: 'Build University Frontend'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an University Frontend image to container registry
      inputs:
        command: buildAndPush
        repository: $(universityFrontendRepo)
        dockerfile: $(universityFrontendDocker)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tagUniversityFrontend)
  - job: BuildLandingDemo
    displayName: 'Build Landing demo'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an Landing demo image to container registry
      inputs:
        command: buildAndPush
        repository: $(landingRepo)
        dockerfile: $(landingDocker)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tagLanding)
- stage: Deploy
  displayName: 'Deploy stage'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: 'Deploy'
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          ## Since deployments are already available in the cluster
          - task: Kubernetes@1
            displayName: kubectl set new image for government backend
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: set
              arguments: image $(governmentBackendDeployment) $(governmentBackendRepo)=$(governmentBackendRepoEndpoint):$(tagGovernmentBackend) -n $(namespace)
          - task: Kubernetes@1
            displayName: kubectl set new image for government frontend
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: set
              arguments: image $(governmentFrontendDeployment) $(governmentFrontendRepo)=$(governmentFrontendRepoEndpoint):$(tagGovernmentFrontend) -n $(namespace)
          - task: Kubernetes@1
            displayName: kubectl set new image for university backend
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: set
              arguments: image $(universityBackendDeployment) $(universityBackendRepo)=$(universityBackendRepoEndpoint):$(tagUniversityBackend) -n $(namespace)
          - task: Kubernetes@1
            displayName: kubectl set new image for university frontend
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: set
              arguments: image $(universityFrontendDeployment) $(universityFrontendRepo)=$(universityFrontendRepoEndpoint):$(tagUniversityFrontend) -n $(namespace)
          - task: Kubernetes@1
            displayName: kubectl set new image for landing demo
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: set
              arguments: image $(landingDeployment) $(landingRepo)=$(landingRepoEndpoint):$(tagLanding) -n $(namespace)
          ## Otherwise, use code below to create a new deployment 
          #- task: Kubernetes@1
          #  displayName: kubectl apply for Government Backend
          #  inputs:
          #    connectionType: Azure Resource Manager
          #    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
          #    azureResourceGroup: $(azureResourceGroup)
          #    kubernetesCluster: $(kubernetesCluster)
          #    command: apply
          #    arguments: -f $(System.DefaultWorkingDirectory)/$(governmentBackendKubernetes) -n $(namespace)
          #- task: Kubernetes@1
          #  displayName: kubectl apply for Government Frontend
          #  inputs:
          #    connectionType: Azure Resource Manager
          #    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
          #    azureResourceGroup: $(azureResourceGroup)
          #    kubernetesCluster: $(kubernetesCluster)
          #    command: apply
          #    arguments: -f $(System.DefaultWorkingDirectory)/$(governmentFrontendKubernetes) -n $(namespace)
          #- task: Kubernetes@1
          #  displayName: kubectl apply for University Backend
          #  inputs:
          #    connectionType: Azure Resource Manager
          #    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
          #    azureResourceGroup: $(azureResourceGroup)
          #    kubernetesCluster: $(kubernetesCluster)
          #    command: apply
          #    arguments: -f $(System.DefaultWorkingDirectory)/$(universityBackendKubernetes) -n $(namespace)
          #- task: Kubernetes@1
          #  displayName: kubectl apply for University Frontend
          #  inputs:
          #    connectionType: Azure Resource Manager
          #    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
          #    azureResourceGroup: $(azureResourceGroup)
          #    kubernetesCluster: $(kubernetesCluster)
          #    command: apply
          #    arguments: -f $(System.DefaultWorkingDirectory)/$(universityFrontendKubernetes) -n $(namespace)
          #- task: Kubernetes@1
          #  displayName: kubectl apply for Landing demo
          #  inputs:
          #    connectionType: Azure Resource Manager
          #    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
          #    azureResourceGroup: $(azureResourceGroup)
          #    kubernetesCluster: $(kubernetesCluster)
          #    command: apply
          #    arguments: -f $(System.DefaultWorkingDirectory)/$(landingKubernetes) -n $(namespace)
          #    command: set
          #    arguments: image $(deployment) $(Repo)=$(RepoEndpoint):$(tag) -n $(namespace)
