# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- ci/cd-azure-pipeline-aks

resources:
- repo: self

variables:

  # Container registry service connection for build
  governmentBackendRepo: 'government-backend'
  governmentBackendDir: '**/implementations/vidchain-government/vidchain-government-backend'
  governmentFrontendRepo: 'government-frontend'
  governmentFrontendDir: '**/implementations/vidchain-government/vidchain-government-frontend'
  universityBackendRepo: 'university-backend'
  universityBackendDir: '**/implementations/vidchain-university/vidchain-university-backend'
  universityFrontendRepo: 'university-frontend'
  universityFrontendDir: '**/implementations/vidchain-university/vidchain-university-frontend'
  landingRepo: 'demo-landing'
  landingDir: '**/implementations/landing-page'
  #tag: '$(Build.BuildId)'
  tag: 'latest'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  
stages:
- stage: Build
  displayName: 'Build stage'
  jobs:  
  - job: BuildGovernmentBackend
    displayName: 'Build Government Backend'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push Government Backend image to container registry
      inputs:
        command: buildAndPush
        repository: $(governmentBackendRepo)
        dockerfile: $(governmentBackendDir)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - upload: manifests
      artifact: manifests
  - job: BuildGovernmentFrontend
    displayName: 'Build Government Frontend'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an Government Frontend image to container registry
      inputs:
        command: buildAndPush
        repository: $(governmentFrontendRepo)
        dockerfile: $(governmentFrontendDir)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - upload: manifests
      artifact: manifests
  - job: BuildUniversityBackend
    displayName: 'Build University Backend'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push University Backend image to container registry
      inputs:
        command: buildAndPush
        repository: $(universityBackendRepo)
        dockerfile: $(universityBackendDir)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - upload: manifests
      artifact: manifests
  - job: BuildUniversityFrontend
    displayName: 'Build University Frontend'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an University Frontend image to container registry
      inputs:
        command: buildAndPush
        repository: $(universityFrontendRepo)
        dockerfile: $(universityFrontendDir)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - upload: manifests
      artifact: manifests
  - job: BuildLandingDemo
    displayName: 'Build Landing demo'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an Landing demo image to container registry
      inputs:
        command: buildAndPush
        repository: $(landingRepo)
        dockerfile: $(landingDir)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - upload: manifests
      artifact: manifests
- stage: Deploy
  displayName: 'Deploy stage'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: 'Deploy'
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            displayName: kubectl apply for Government Backend
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: apply
              useConfigurationFile: true
              configuration: $(governmentBackendDir)/k8s.yaml  
          - task: Kubernetes@1
            displayName: kubectl apply for Government Frontend
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: apply
              useConfigurationFile: true
              configuration: $(governmentFrontendDir)/k8s.yaml
          - task: Kubernetes@1
            displayName: kubectl apply for University Backend
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: apply
              useConfigurationFile: true
              configuration: $(universityBackendDir)/k8s.yaml
          - task: Kubernetes@1
            displayName: kubectl apply for University Frontend
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: apply
              useConfigurationFile: true
              configuration: $(universityFrontendDir)/k8s.yaml
          - task: Kubernetes@1
            displayName: kubectl apply for Landing demo
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint) 
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: apply
              useConfigurationFile: true
              configuration: $(landingDir)/k8s.yaml     